#!/bin/sh
#
# Light package manager for Raptor.
# Copyright 2017 Egor Mikhailov <nagakamira@mail.ru>
#

# === Some Libraries ==================================================================

VERSION=1.0beta

CATEGORIES="base-system
x-window
utilities
network
graphics
multimedia
office
development
system-tools
security
games
misc
meta
non-free"

COMMAND=$1
if [ -f $2 ]; then
	PACKAGE=$(basename ${2%.pkg} 2>/dev/null)
else
	PACKAGE=${2%.pkg}
fi

PACKAGE_FILE=$2
TARGET_DIR=$3
TOP_DIR=`pwd`
TMP_DIR=/tmp/rapkg-$$-$RANDOM
LOCALSTATE=/var/lib/rapkg
INSTALLED=$LOCALSTATE/installed
CACHE_DIR=/var/cache/rapkg
MIRROR=$LOCALSTATE/mirror
PACKAGES_LIST=$LOCALSTATE/packages.list
BLOCKED=$LOCALSTATE/blocked-packages.list
WARNING="\\033[1;31mWARNING\\033[0;39m"

if test $(id -u) = 0 ; then
	if [ ! -d "$CACHE_DIR" ]; then
		mkdir -p $CACHE_DIR
	fi
	if [ ! -d "$INSTALLED" ]; then
	  mkdir -p $INSTALLED
	fi
	if [ ! -f "$LOCALSTATE/mirror" ]; then
	  echo "$DEFAULT_MIRROR" > $LOCALSTATE/mirror
	fi
fi

# === Library ==================================================================

usage () {
  echo -e "Raptor packages manager - Version: $VERSION

\033[1mUsage: \033[0m `basename $0` [command] [package] [dir]
\033[1mCommands: \033[0m

	usage           	Print this usage.
	list            	List all installed packages.
	install         	Download and install a package from the mirror.
	remove          	Remove specified package.
	update        		Recharge your packges.list from the mirror.
	upgrade			Upgrade all installed and listed packages on the mirror.
	add 			Install a local (*.pkg) package.
	get-list 		Download and install a list of packages from the mirror.
	block|unblock   	Block an installed package version or unblock it for upgrade.
   "  
}

status()
{
  local CHECK=$?
    echo -en "\033[64G"
    if [ $CHECK = 0 ] ; then
      echo -e "\e[1;32m[ DONE ]\e[0m"
    else
      echo -e "\e[1;31m[FAILED]\e[0m"
    fi
}

root()
{
	if test $(id -u) != 0 ; then
		echo -e "\nYou are not a root!"
		exit 0
	fi
}

check_for_package_on_cmdline()
{
	if [ -z "$PACKAGE" ]; then
		echo -e "\nPlease specify a package name on the command line.\n"
		exit 0
	fi
}

package_file()
{
	if [ ! -f "$PACKAGE_FILE" ]; then
		echo -e "Unable to find : $PACKAGE_FILE\n"
		exit 0
	fi
}

installed_package()
{
	if [ -d "$INSTALLED/${PACKAGE%-[0-9]*}" ]; then
		echo -e "That package already installed in your system! If you need reinstall a package, use "--force" option."
		exit 0
	fi
}

packages_list()
{
	if [ ! -f "$LOCALSTATE/packages.list" ]; then
		echo -e "Unable to find the list: $LOCALSTATE/packages.list\n
You must probably run 'rapkg update' as root to get the last list of 
packages avalaible on the mirror.\n"
		exit 0
	fi
}

package_in_list()
{
	if grep -q "^$PACKAGE-[0-9]" $LOCALSTATE/packages.list; then
		PACKAGE=`grep ^$PACKAGE-[0-9] $LOCALSTATE/packages.list`
	else
		echo -e "\nUnable to find: $PACKAGE in the mirrored packages list.\n"
		exit 0
	fi
}

extract()
{
	cpio -id < $PACKAGE.pkg && rm -f $PACKAGE.pkg
	gzip -d fs.cpio.gz
	cpio -id < fs.cpio && rm fs.cpio
}

add()
{
	mkdir -p $TMP_DIR
	echo ""
	echo "================================================================================"
	echo ""
	echo -e "\033[1mInstallation of :\033[0m $PACKAGE"
	echo ""
	echo "================================================================================"
	echo ""
	echo -n "Copying $PACKAGE... "
	cp $PACKAGE_FILE $TMP_DIR
	status
	cd $TMP_DIR
	extract
	. $PWD/receipt
	mkdir -p $INSTALLED/$PACKAGE
	cp receipt $INSTALLED/$PACKAGE
	. $INSTALLED/$PACKAGE/receipt
	cp files.list $INSTALLED/$PACKAGE
	if [ -f "description.txt" ]; then
		cp description.txt $INSTALLED/$PACKAGE
	fi
	if [ `cat $INSTALLED/$PACKAGE/receipt | grep pre_install` ]; then
		pre_install
	fi
	echo -n "Installing $PACKAGE... "
	cp -a fs/* /
	status
	echo -n "Removing all tmp files... "
	cd .. && rm -rf $TMP_DIR
	status
	if [ `cat $INSTALLED/$PACKAGE/receipt | grep post_install` ]; then
		post_install
	fi
	cd $TOP_DIR
	echo ""
	echo "================================================================================"
	echo ""
	echo "$PACKAGE is installed."
	echo ""
	echo "================================================================================"
	echo ""
}

check_for_deps()
{
	for i in $DEPENDS
	do
		if [ ! -d "$INSTALLED/$i" ]; then
			MISSING_PACKAGE=$i
			deps=$(($deps+1))
		fi
	done
	if [ ! "$MISSING_PACKAGE" = "" ]; then
		echo "================================================================================"
		echo ""
		echo -e "\033[1mTracking dependencies for :\033[0m $PACKAGE"
		echo ""
		echo "================================================================================"
		for i in $DEPENDS
		do
			if [ ! -d "$INSTALLED/$i" ]; then
				MISSING_PACKAGE=$i
				echo "Missing : $MISSING_PACKAGE"
			fi
		done
		echo "================================================================================"
		echo ""
		echo "$deps missing package(s) to install."
		echo ""
		echo "================================================================================"
	fi
}

install_deps()
{
	local root
	root=""
	[ -n "$1" ] && root="--root=$1"
	echo ""
	echo -n "Install all missing dependencies (y/N) ? "; read anser
	echo ""
	if [ "$anser" = "y" ]; then
		for pkgorg in $DEPENDS
		do
			pkg=$(equivalent_pkg $pkgorg $1)
			if [ ! -d "$1$INSTALLED/$pkg" ]; then
				local list
				list="$INSTALL_LIST"
				[ -n "$list" ] || list="$TOP_DIR/packages.list"
				found=0
				if [ -f "$list" ]; then
					echo "Checking if $pkg exist in local list... "
					mkdir $TMP_DIR
					for i in $pkg-*.pkg; do
						[ -f $i ] || continue
						( cd $TMP_DIR ; cpio -i receipt > /dev/null) < $i
						[ "$(. $TMP_DIR/receipt; echo $PACKAGE)" = "$pkg" ] || continue
						if grep -q ^$(package_fullname_in_dir $TMP_DIR).pkg$ $list
						then
							found=1
							rapkg add $i $root --list=$list
							break
						fi
					done
					rm -rf $TMP_DIR
				fi
				if [ $found -eq 0 ]; then
					if [ ! -f "$LOCALSTATE/packages.list" ]; then
						rapkg update
					fi
					rapkg add $pkg $root
				fi
			fi
		done
	else
		echo -e "\nLeaving dependencies for $PACKAGE unsolved."
		echo -e "The package is installed but will probably not work.\n"
	fi
}

remove ()
{
		if [ ! -d "$INSTALLED/$PACKAGE" ]; then
			echo -e "\n$PACKAGE is not installed.\n"
			exit 0
		else
			. $INSTALLED/$PACKAGE/receipt
		fi
		echo ""
		echo "Remove $PACKAGE ($VERSION) ?"
		echo -n "Please confirm uninstallation (y/N) : "; read anser
		if [ "$anser" = "y" ]; then
			echo ""
			echo -e "\033[1mRemoving :\033[0m $PACKAGE"
			echo "================================================================================"
			echo ""
			echo -n "Removing all files installed..."
			echo ""
			echo "================================================================================"
			for file in `cat $INSTALLED/$PACKAGE/files.list`
			do
				rm -f $file
			done
			status
			echo -n "Removing package receipt..."
			rm -rf $INSTALLED/$PACKAGE
			status
		else
			echo ""
			echo "Uninstallation of $PACKAGE cancelled."
		fi
		echo ""
}

upgrade ()
{
		cd $LOCALSTATE
		touch blocked-packages.list
		rm -f upgradeable-packages.list
		echo "================================================================================"
		echo ""
		echo -e "\033[1mAvailable upgrades\033[0m"
		echo ""
		echo "================================================================================"
		FIRST_CLASS_PACKAGE=" glibc-base slitaz-base-files slitaz-boot-scripts "
		for pkg in $INSTALLED/*
		do 
			[ -f $pkg/receipt ] || continue
			EXTRAVERSION=""
			. $pkg/receipt
			echo -en "\\033[0G                                         "
			echo -en "\\033[0G$PACKAGE"
			if grep -q "^$PACKAGE" $BLOCKED; then
				blocked=$(($blocked+1))
			else
				NEW_PACKAGE=$(get_package_filename $PACKAGE)

				if [ -n "$NEW_PACKAGE" ]; then
					# Set new pkg and version for futur comparaison
					NEW_VERSION=`echo $NEW_PACKAGE | sed s/$PACKAGE-/''/`
					# Change '-' and 'pre' to points.
					NEW_VERSION=`echo $NEW_VERSION | sed s/'-'/'.'/`
					VERSION=`echo $VERSION | sed s/'-'/'.'/`$EXTRAVERSION
					NEW_VERSION=`echo $NEW_VERSION | sed s/'pre'/'.'/`
					VERSION=`echo $VERSION | sed s/'pre'/'.'/`
					NEW_VERSION=`echo $NEW_VERSION | sed 's/[A-Z]\.//'`
					VERSION=`echo $VERSION | sed 's/[A-Z]\.//'`
					RELEASE=""
					if [ -f installed.md5 -a -f packages.md5 ]; then
						current_md5=$(grep -s "/$PACKAGE-$VERSION" installed.md5 | awk '{ print $1 }')
						new_md5=$(grep -s "  $PACKAGE-$VERSION" packages.md5 | awk '{ print $1 }')
						[ -n "$current_md5" ] && [ -n "$new_md5" ] &&
						[ "$current_md5" != "$new_md5" ] && RELEASE=build
					fi
					if [ "$VERSION" != "$NEW_VERSION" -o -n "$RELEASE" ]; then
						# Version seems different. Check for major, minor or 
						# revision
						PKG_MAJOR=`echo ${VERSION%_*} | cut -f1 -d"."`
						NEW_MAJOR=`echo ${NEW_VERSION%_*} | cut -f1 -d"."`
						PKG_MINOR=`echo ${VERSION%_*} | cut -f2 -d"."`
						NEW_MINOR=`echo ${NEW_VERSION%_*} | cut -f2 -d"."`
						# Minor
						if [ "$NEW_MINOR" -gt "$PKG_MINOR" ] 2> /dev/null; then
							RELEASE=minor
						fi
						if [ "$NEW_MINOR" -lt "$PKG_MINOR" ] 2> /dev/null; then
							RELEASE=$WARNING
							FIXE=yes
						fi
						# Major
						if [ "$NEW_MAJOR" -gt "$PKG_MAJOR" ] 2> /dev/null; then
							RELEASE=major
							FIXE=""
						fi
						if [ "$NEW_MAJOR" -lt "$PKG_MAJOR" ] 2> /dev/null; then
							RELEASE=$WARNING
							FIXE=yes
						fi
						# Default to revision.
						if [ -z $RELEASE ]; then
							RELEASE=revision
						fi
						# Pkg name is already displayed by the check process.
						echo -en "\033[24G $VERSION"
						echo -en "\033[38G --->"
						echo -en "\033[43G $NEW_VERSION"
						echo -en "\033[58G $CATEGORY"
						echo -e "\033[72G $RELEASE"
						up=$(($up+1))
						echo "$PACKAGE" >> upgradeable-packages.list
						case "$FIRST_CLASS_PACKAGE" in
						*\ $PACKAGE\ *) echo "$PACKAGE" >> upgradeable-packages.list$$;;
						esac
						unset RELEASE
					fi
					packages=$(($packages+1))
				fi
			fi
		done
		if [ -z $blocked ]; then
			blocked=0
		fi
		if [ ! "$up" = "" ]; then
			echo -e "\\033[0G                                         "
			echo "================================================================================"
			echo ""
			echo "$packages installed and listed packages to consider, $up to upgrade, $blocked blocked."
			echo ""
			echo "================================================================================"
		else
			echo -e "\\033[0GSystem is up-to-date.                    "
			echo "================================================================================"
			echo ""
			echo "$packages installed and listed packages to consider, 0 to upgrade, $blocked blocked."
			echo ""
			echo "================================================================================"
			exit 0
		fi
		if [ "$FIXE" == "yes" ]; then
			echo -e "$WARNING ---> Installed package seems more recent than the mirrored one."
			echo "You can block packages using the command : 'rapkg block package'"
			echo "Or upgrade package at you own risks."
			echo ""
		fi
		echo -n "Upgrade now? "; read anser
		if [ ! "$anser" = "y" ]; then
			echo -e "\nExiting. No package upgraded.\n"
			exit 0
		fi
		cat upgradeable-packages.list >> upgradeable-packages.list$$
		mv -f upgradeable-packages.list$$ upgradeable-packages.list
		yes y | rapkg get-list upgradeable-packages.list --forced
		rm -f upgradeable-packages.list
}

info_pkg()
{
		. $INSTALLED/$PACKAGE/receipt
		echo ""
		echo -e "\033[1mRapkg informations\033[0m
================================================================================
Package    : $PACKAGE
Version    : $VERSION
Category   : $CATEGORY
Short desc : $SHORT_DESC
Maintainer : $MAINTAINER"
		if [ ! "$DEPENDS" = "" ]; then
			echo -e "Depends    : $DEPENDS"
		fi
		if [ ! "$WANTED" = "" ]; then
			echo -e "Wanted src : $WANTED"
		fi
		if [ ! "$WEB_SITE" = "" ]; then
			echo -e "Web site   : $WEB_SITE"
		fi
		echo "================================================================================"
		echo ""
}

update()
{
		cd $LOCALSTATE
		echo ""
		if [ -f "$LOCALSTATE/packages.list" ]; then
			echo -n "Creating backup of the last packages list..."
			mv -f packages.list packages.list.bak
			status
		fi
		wget `cat $MIRROR`/packages.list
		if [ -f "$LOCALSTATE/packages.list.bak" ]; then
			diff -u packages.list.bak packages.list | grep ^+[a-z] > packages.diff
			sed -i s/+// packages.diff
			echo ""
			echo -e "\033[1mMirrored packages diff\033[0m"
			echo "================================================================================"
			cat packages.diff
			if [ ! "`cat packages.diff | wc -l`" = 0 ]; then
				echo "================================================================================"
				echo "`cat packages.diff | wc -l` new packages on the mirror."
				echo ""
			else
				echo "`cat packages.diff | wc -l` new packages on the mirror."
				echo ""
			fi
		else
			echo -e "================================================================================
Last packages.list is ready to use. Note that next time you recharge the list,
a list of differencies will be displayed to show new and upgradable packages.\n"
		fi
}

list ()
{
		# List all installed packages or a specific category.
		#
		if [ "$2" = "category" ]; then
			echo -e "\033[1m\nPackages categories :\033[0m $CATEGORIES\n"
			exit 0
		fi
		# Check for an asked category.
		if [ -n "$2" ]; then
			ASKED_CATEGORY=$2
			echo ""
			echo -e "\033[1mInstalled packages of category :\033[0m $ASKED_CATEGORY"
			echo "================================================================================"
			for pkg in $INSTALLED/*
			do
				. $pkg/receipt
				if [ "$CATEGORY" == "$ASKED_CATEGORY" ]; then
					echo -n "$PACKAGE"
					echo -e "\033[24G $VERSION"
					packages=$(($packages+1))
				fi
			done
			echo "================================================================================"
			echo -e "$packages packages installed of category $ASKED_CATEGORY."
			echo ""
		else
			# By default list all packages and version.
			echo ""
			echo -e "\033[1mList of all installed packages\033[0m"
			echo "================================================================================"
			for pkg in $INSTALLED/*
			do
				. $pkg/receipt
				echo -n "$PACKAGE"
				echo -en "\033[24G $VERSION"
				echo -e "\033[42G $CATEGORY"
				packages=$(($packages+1))
			done
			echo "================================================================================"
			echo "$packages packages installed."
			echo ""
		fi
}

# === Main =====================================================================

case "$COMMAND" in
	add)
		root
		check_for_package_on_cmdline
		if [ "$3" = "--forced" ]; then
			continue
		else
			installed_package
		fi
		add
		check_for_deps
		if [ ! "$MISSING_PACKAGE" = "" ]; then
			install_deps
		fi
		;;
	install)
		root
		check_for_package_on_cmdline
		package_list
		package_in_list
		if [ "$3" = "--forced" ]; then
			rm -f $CACHE_DIR/$PACKAGE.pkg
		else
			installed_package
		fi
		cd $CACHE_DIR
		if [ -f "$PACKAGE.pkg" ]; then
			echo "$PACKAGE already in the cache : $CACHE_DIR"
		else
			echo ""
			wget `cat $MIRROR`/$PACKAGE.pkg
		fi
		PACKAGE_FILE=$CACHE_DIR/$PACKAGE.pkg
		add
		check_for_deps
		if [ ! "$MISSING_PACKAGE" = "" ]; then
			install_deps
		fi
		;;
	remove)
			root
			check_for_package_on_cmdline
			remove
		;;
	update)
			root
			update
		;;
	upgrade)
			root
			check_for_package_on_cmdline
			upgrade
		;;
	list)
			list
		;;
	block)
		# Add a pkg name to the list of blocked packages.
		#
		root
		check_for_package_on_cmdline
		echo ""
		if grep -q "^$PACKAGE" $BLOCKED; then
			echo "$PACKAGE is already in the blocked packages list."
			echo ""
			exit 0
		else
			echo -n "Add $PACKAGE to : $BLOCKED..."
			echo $PACKAGE >> $BLOCKED
			status
			# Log this activity
			. $INSTALLED/$PACKAGE/receipt
			log Blocked
		fi
		echo ""
		;;
	unblock)
		# Remove a pkg name from the list of blocked packages.
		#
		root
		check_for_package_on_cmdline
		echo ""
		if grep -q "^$PACKAGE" $BLOCKED; then
			echo -n "Removing $PACKAGE from : $BLOCKED..."
			sed -i s/$PACKAGE/''/ $BLOCKED
			sed -i '/^$/d' $BLOCKED
			status
			# Log this activity
			. $INSTALLED/$PACKAGE/receipt
			log Unblocked
		else
			echo "$PACKAGE is not in the blocked packages list."
			echo ""
			exit 0
		fi
		echo ""
		;;
	get-list) 		# Install a set of packages from a list.
		#
		root
		if [ -z "$2" ]; then
			echo -e "Please change directory (cd) to the packages repository, and specify the
list of packages to install. Example : rapkg get-list packages.list\n"
			exit 0
		fi
		# Check if the packages list exist.
		if [ ! -f "$2" ]; then
			echo "Unable to find : $2"
			exit 0
		else
			LIST=`cat $2`
		fi
		
		# Remember processed list
		export INSTALL_LIST="$2"

		# Set $COMMAND and install all packages.
		if [ "$1" = "get-install-list" ]; then
			COMMAND=get-install
		else
			COMMAND=install
		fi
		touch $2-processed
		for pkg in $LIST
		do
			grep -qs ^$pkg$ $2-processed && continue
			rapkg $COMMAND $pkg --list=$2 "$3" "$4" "$5"
		done
		rm -f $2-processed
		;;
	usage|*)
			usage
		;;
esac

exit 0
