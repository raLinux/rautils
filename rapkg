#!/bin/sh
# tazpkg - SliTaz packages manager.
#
# This is a lightwight packages manager for *.tazpkg files, 
# all written in shell script. It works well with Busybox
# ash shell and bash.
#
# (C) 2007 SliTaz - GNU General Public License.
# Author: <leks@libordux.org>
#

####################
# Script variables #
####################

VERSION=1.0
DEFAULT_MIRROR=http://download.tuxfamily.org/slitaz/packages/1.0/

# Initialize some variables to use words
# rater than numbers for functions and actions.
PACKAGE_NAME=${2%.tazpkg}
PACKAGE=$PACKAGE_NAME.tazpkg
TARGETDIR=$3

# Configuration variables.
LOCALSTATEDIR=/var/lib/tazpkg
INSTALLED_PACKAGES=$LOCALSTATEDIR/installed
CACHEDIR=/var/cache/tazpkg
TMPDIR=/tmp/tazpkg-$PACKAGE_NAME
MIRROR=$LOCALSTATEDIR/mirror
PACKAGE_LIST=$LOCALSTATEDIR/packages.list

# Check if the directories and files used by tazpkg 
# exists. If not and user is root we creat them.
if test $(id -u) = 0 ; then
  if [ ! -d "$CACHEDIR" ] ; then
    mkdir -p $CACHEDIR
  fi
  if [ ! -d "$INSTALLED_PACKAGES" ] ; then
    mkdir -p $INSTALLED_PACKAGES
  fi
  if [ ! -f "$LOCALSTATEDIR/mirror" ] ; then
    echo "$DEFAULT_MIRROR" > \
    $LOCALSTATEDIR/mirror
  fi
fi

####################
# Script functions #
####################

# Print the usage.
usage () {
  echo -e "SliTaz packages manager - Version: $VERSION

\033[1mUsage: \033[0m `basename $0` [command] [package] [dir]
\033[1mCommands: \033[0m

   usage           Print this usage.
   list            List all installed packages.
   list-mirror     List all available packages on the mirror.
   list-files      List of files installed with the package.
   desc            Print a short description of the package.
  
   check-md5       Check *.tazpkg.md5 file of a package.
   install         Install a (*.tazpkg) package. See also get-install.
   extract         Extract a (*.tazpkg) package into a directory.
   remove          Remove specified package.

   recharge        Recharge your packges.list from the mirror.
   get             Download a package into the current directory.
   get-install     Download and install a package from the mirror.
   clean-cache     Clean all packages downloaded in cache directory.
   setup-mirror    Change the mirror url configuration.
   "  
}

# Check command status.
status()
{
  local CHECK=$?
    echo -en "\033[64G"
    if [ $CHECK = 0 ] ; then
      echo -e "\033[1mOK\033[0m"
    else
      echo -e "\033[1mFailed\033[0m"
    fi
}

# Check if user is root to install, or remove packages.
check_root()
{
  if test $(id -u) != 0 ; then
    echo "You must be root to run `basename $0` with this option!"
    echo "Type su and root password to become super-user."
    exit 1
  fi
}

# Check for a package name on cmdline.
check_for_package_on_cmdline()
{
  if [ -z "$PACKAGE_NAME" ] ; then
    echo "You must specify a package name."
    exit 1
  fi
}

# Check if *.tazpkg specified on cmdline exist.
check_for_package_file()
{
  if [ ! -f "$PACKAGE" ] ; then
    echo "Unable to find SliTaz package: $PACKAGE"
    exit 1
  fi
}

# Check if the package is in current dir.
check_for_package_in_pwd()
{
  if [ ! -f "$PWD/$PACKAGE" ] ; then
    echo "Unable to find the package in: $PWD"
    echo "You must be in the package directory to install."
    exit 1
  fi
}

# Check for an installed package metafile.
check_for_metafile()
{
  if [ ! -f "$INSTALLED_PACKAGES/$PACKAGE_NAME" ] ; then
    echo "Unable to find metafile: $INSTALLED_PACKAGES/$PACKAGE_NAME."
    exit 1
  fi
}

# Check if a package is already installed.
check_for_installed_package()
{
  if [ -f "$INSTALLED_PACKAGES/$PACKAGE_NAME" ] ; then
    echo "$PACKAGE_NAME is already installed."
    exit 1
  fi
}

# Check for package.list to download and install packages.
check_for_packages_list()
{
  if [ ! -f "$LOCALSTATEDIR/packages.list" ] ; then
    echo "Unable to find: $LOCALSTATEDIR/packages.list"
    echo "You must probably run 'tazpkg recharge' as root."
    exit 1
  fi
}

# Check for a package in packages.list.
check_for_package_in_list()
{
  echo "Checking if $PACKAGE_NAME exist in list... "
  if [ "`grep $PACKAGE_NAME $LOCALSTATEDIR/packages.list`" = "$PACKAGE_NAME" ] ; then
    echo -n "Package exist! Download is going to start... "
    status && sleep 1
  else
    echo "Unable to find: $PACKAGE_NAME in the list... "
    exit 1
  fi
}

# Extract a package with cpio and gzip.
extract_package()
{
  cpio -id < $PACKAGE
  echo -n "Removing extracted copy of: $PACKAGE... "
  rm -f $PWD/$PACKAGE
  status
  find . -name "*.gz" -exec gzip -d '{}' \;
}

# This function install a package in the rootfs.
install_package()
{
  mkdir -p $TMPDIR
  echo -n "Copying $PACKAGE... "
  cp $PACKAGE $TMPDIR
  status
  cd $TMPDIR
  echo "Extracting $PACKAGE... "
  extract_package
  echo -n "Installing $PACKAGE_NAME... "
  cp -a * /
  status
  echo -n "Removing all tmp files... "
  cd .. && rm -rf $TMPDIR
  status
  # Execute install commands
  . $INSTALLED_PACKAGES/$PACKAGE_NAME
  install_commands
  echo "$PACKAGE is installed."
}

###################
# tazpkg commands #
###################

case "$1" in
  usage)
    # Help.
    usage
    ;;
  list)
    # List all installed packages.
    echo ""
    echo -e "\033[1mList of installed packages: \033[0m"
    echo ""
    ls -1 $INSTALLED_PACKAGES
    echo ""
    ;;
  list-mirror)
    # List all available packages on the mirror.
    check_for_packages_list
    echo ""
    echo -e "\033[1mList of available packages on the mirror: \033[0m"
    echo ""
    cat $LOCALSTATEDIR/packages.list
    echo ""
    ;;
  list-files)
    # List files installed with the package.
    check_for_package_on_cmdline
    check_for_metafile
    . $INSTALLED_PACKAGES/$PACKAGE_NAME
    echo -e "
\033[1mInstalled files with: \033[0m $PACKAGE_NAME

\033[1mBIN:\033[0m $BIN
\033[1mSBIN: \033[0m $SBIN
\033[1mLIB: \033[0m $LIB
\033[1mSHARE: \033[0m$SHARE
\033[1mCONFIG: \033[0m $CONFIG"
    echo ""
    ;;
  desc)
    # Description of a package.
    check_for_package_on_cmdline
    check_for_metafile
    . $INSTALLED_PACKAGES/$PACKAGE_NAME
    echo ""
    echo -e "\033[1mDescription of: \033[0m $PACKAGE_NAME"
    echo "$DESCRIPTION"
    echo ""
    ;;
  check-md5)
    # Check a .tazpkg.md5 file of a package.
    if [ -f "$2" ] ; then
      md5sum -c $2
    else
      echo "Unable to find tazpkg md5sum file: $2"
      exit 1
    fi
    ;;
  install)
    # Install .tazpkg packages.
    check_root
    check_for_package_on_cmdline
    check_for_package_in_pwd
    check_for_installed_package
    install_package
    ;;
  extract)
    # Extract .tazpkg cpio archive into a directory.
    check_for_package_on_cmdline
    check_for_package_file
    # If any directory destination is found on the cmdline
    # we creat one in the current dir using the package name.
    if [ -n "$TARGETDIR" ] ; then
      DESTDIR=$TARGETDIR/$PACKAGE_NAME
    else
      DESTDIR=`pwd`/$PACKAGE_NAME
    fi
    mkdir -p $DESTDIR
    echo -n "Copying $PACKAGE to $DESTDIR... "
    cp $PACKAGE $DESTDIR
    status
    cd $DESTDIR
    echo "Extracting $PACKAGE into $DESTDIR..."
    extract_package
    echo "$PACKAGE_NAME is extracted to: $DESTDIR"
    ;;
  remove)
    # Remove packages.
    check_root
    check_for_package_on_cmdline
    check_for_metafile
    echo "Confirm uninstallation of $PACKAGE_NAME package?"
    echo -n "(y/N) : "; read anser
    if [ "$anser" = "y" ] ; then
      . $INSTALLED_PACKAGES/$PACKAGE_NAME
      echo -n "Removing all stuff installed with $PACKAGE_NAME... "
      rm -rf $BIN $SBIN $LIB $SHARE $CONFIG
      rm $INSTALLED_PACKAGES/$PACKAGE_NAME
      status
    else
     echo "Uninstallation of $PACKAGE_NAME cancelled."
    fi
    ;;
  recharge)
    # Recharge packages.list from a mirror.
    check_root
    cd $LOCALSTATEDIR
    if [ -f "$LOCALSTATEDIR/packages.list" ] ; then
      mv -f packages.list packages.list.bak
    fi
    wget `cat $MIRROR`/packages.list
    ;;
  get)
    # Downlowd a package with wget.
    check_for_packages_list
    check_for_package_on_cmdline
    check_for_package_in_list
    wget `cat $MIRROR`/$PACKAGE
    ;;
  get-install)
    # Download and install a package.
    check_root
    check_for_packages_list
    check_for_package_on_cmdline
    check_for_installed_package
    check_for_package_in_list
    cd $CACHEDIR
    wget `cat $MIRROR`/$PACKAGE
    install_package
    ;;
  clean-cache)
    # Remove all downloaded packages.
    check_root
    echo -n "Removing all files in cache dir: $CACHEDIR... "
    rm -rf $CACHEDIR/*
    status
    ;;
  setup-mirror)
    check_root
    if [ -f "$LOCALSTATEDIR/mirror" ] ; then
      mv -f mirror mirror.bak
    fi
    echo ""
    echo -e "\033[1mActual mirror: \033[0m $MIRROR"
    echo "
Please enter URL of the new mirror (http or ftp).
You must specify the complet address to the directory
of the packages and packages.list file."
    echo ""
    echo -n "New mirror: "
    read NEW_MIRROR_URL
    if [ "$NEW_MIRROR_URL" = "" ] ; then
      echo "Nothing as been change."
    else
      echo "Setting mirror to: $NEW_MIRROR_URL"
      echo "$NEW_MIRROR_URL" > $LOCALSTATEDIR/mirror
    fi
    ;;
  *)
    usage
    ;;
esac

exit 0
